name: ECS CICD
on:
  push:
    branches:
      - main  
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest 
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume:  arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/github-actions2
        aws-region: ap-northeast-2  

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag, and push docker image to Amazon ECR Public
     
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        id: image-build
        REPOSITORY: test
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:latest
        echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: web
        image: ${{ steps.image-build.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: web
        cluster: ecs-cluster
        wait-for-service-stability: true